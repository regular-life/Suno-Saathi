import json
from typing import Optional

from fastapi import APIRouter, HTTPException, Request

from core.config import CONFIG
from modules.llm_interface import generate_reply
from modules.navigation import NavigationHandler

from .schemas import (
    DirectionsRequest,
    DirectionsResponse,
    GeocodeRequest,
    GeocodeResponse,
    NavigationQueryRequest,
    NavigationQueryResponse,
    PlacesRequest,
    PlacesResponse,
    TrafficRequest,
    TrafficResponse,
    WakeWordRequest,
    WakeWordResponse,
)

router = APIRouter(prefix="/api")

# Initialize navigation handler
navigation = NavigationHandler()


# Navigation API routes - consolidated endpoints (supporting both GET and POST)
@router.get("/navigation/directions", response_model=DirectionsResponse)
async def get_directions(origin: str, destination: str, mode: str = "driving"):
    """Get directions between two locations via GET"""
    try:
        directions = navigation.get_directions(origin, destination, mode)
        return DirectionsResponse(status="success", routes=directions)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/navigation/places", response_model=PlacesResponse)
async def find_places(query: str, location: Optional[str] = None):
    """Find places based on a query string via GET"""
    try:
        places = navigation.find_places(query, location)
        return places
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/navigation/geocode", response_model=GeocodeResponse)
async def geocode_address(address: str):
    """Geocode an address to coordinates via GET"""
    try:
        result = navigation.geocode_address(address)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/navigation/traffic", response_model=TrafficResponse)
async def get_traffic(origin: str, destination: str):
    """Get traffic information between two points via GET"""
    try:
        traffic_info = navigation.get_traffic_info(origin, destination)
        return traffic_info
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/navigation/query", response_model=NavigationQueryResponse)
async def process_navigation_query(request: NavigationQueryRequest):
    """Process a natural language navigation query"""
    if not request.query:
        raise HTTPException(status_code=400, detail="Query is required")

    try:
        # Create context-aware prompt
        context_text = ""
        if request.context:
            context_text = f"Navigation Context: {json.dumps(request.context)}\n"

        prompt = f"{context_text}User's navigation query: {request.query}\n\nInterpret this navigation-related query and provide a helpful response:"

        # Generate response using LLM
        response = generate_reply(prompt)

        # Extract response text
        if response and response.get("status") == "success":
            return NavigationQueryResponse(
                query_type="llm_processed",
                response=response.get("response"),
                processed_query=request.query,
            )

        # Fallback to rule-based interpretation if LLM response is not successful
        query_lower = request.query.lower()
        response_data = NavigationQueryResponse(
            query_type="general_navigation",
            response="",
            original_query=request.query,
        )

        # Handle traffic-related queries
        if any(keyword in query_lower for keyword in ["traffic", "congestion", "jam", "busy"]):
            response_data.query_type = "traffic"

            # Try to get actual traffic if location is provided
            if request.location and request.context and request.context.get("destination"):
                try:
                    origin = f"{request.location.get('latitude')},{request.location.get('longitude')}"
                    destination = request.context.get("destination")
                    traffic_info = navigation.get_traffic_info(origin, destination)

                    response_data.traffic_info = traffic_info
                    response_data.response = f"Traffic is {traffic_info.get('traffic_level', 'moderate')} on your route. Expected delay of {traffic_info.get('delay_minutes', '5-10')} minutes."
                    return response_data
                except Exception as e:
                    print(f"Error getting traffic info: {e}")

            # Fallback traffic response
            response_data.response = (
                "Let me check the traffic conditions for you. Please make sure your location is enabled."
            )
            return response_data

        # Handle route feature queries
        elif any(keyword in query_lower for keyword in ["flyover", "underpass", "bridge", "tunnel"]):
            feature = next(
                (keyword for keyword in ["flyover", "underpass", "bridge", "tunnel"] if keyword in query_lower),
                "feature",
            )
            response_data.query_type = "route_feature"
            response_data.feature = feature
            response_data.response = f"There's a {feature} ahead on your route. I'll guide you when we get closer."
            return response_data

        # Handle alternative route queries
        elif any(
            keyword in query_lower
            for keyword in [
                "shortcut",
                "faster",
                "quicker",
                "alternative",
                "another way",
            ]
        ):
            response_data.query_type = "alternative_route"
            response_data.response = "I'll check for alternatives on your route. Let me analyze the traffic conditions."
            return response_data

        # Handle nearby place queries
        elif any(keyword in query_lower for keyword in ["nearby", "close", "around", "find", "search"]):
            place_types = [
                "restaurant",
                "gas",
                "petrol",
                "fuel",
                "hotel",
                "hospital",
                "pharmacy",
                "atm",
                "bank",
                "cafe",
                "coffee",
            ]
            found_type = next(
                (place_type for place_type in place_types if place_type in query_lower),
                None,
            )

            if found_type:
                response_data.query_type = "nearby_place"
                response_data.place_type = found_type

                # Try to find places if location is provided
                if request.location:
                    try:
                        location_str = f"{request.location.get('latitude')},{request.location.get('longitude')}"
                        search_term = found_type
                        if found_type in ["gas", "petrol", "fuel"]:
                            search_term = "gas station"

                        places = navigation.find_places(search_term, location_str)
                        response_data.places = places

                        if places.get("status") == "OK" and places.get("places"):
                            place_count = min(3, len(places.get("places", [])))
                            response_data.response = f"I found {place_count} {search_term}s nearby. The closest one is {places['places'][0]['name']}."
                            return response_data
                    except Exception as e:
                        print(f"Error finding places: {e}")

                response_data.response = (
                    f"I'll help you find {found_type}s nearby. Please make sure your location is enabled."
                )
                return response_data

        # Default response
        response_data.response = (
            "I'll help you with your navigation needs. Please provide more details or ask a specific question."
        )
        return response_data

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing navigation query: {str(e)}")


# Wake word routes
@router.post("/wake/detect", response_model=WakeWordResponse)
async def detect_wake_word(request: WakeWordRequest):
    """Detect wake word in text using improved method"""
    try:
        if not request.text:
            raise HTTPException(status_code=400, detail="Text is required")

        # Primary wake words
        primary_wake_words = ["suno saarthi", "hello saarthi"]

        # Variant spellings and phonetic matches
        variant_wake_words = [
            "suno sarathi",
            "suno sarthi",
            "suno saarti",
            "sunno saarthi",
            "sonu saarthi",
            "soonu saarthi",
            "hey saarthi",
            "hi saarthi",
            "ok saarthi",
        ]

        text_lower = request.text.lower()

        # Check for primary wake words - exact match
        primary_detected = any(word in text_lower for word in primary_wake_words)

        # Check for variant wake words
        variant_detected = any(word in text_lower for word in variant_wake_words)

        # Determine confidence level
        confidence = 0.0
        if primary_detected:
            confidence = 0.95
        elif variant_detected:
            confidence = 0.85

        return WakeWordResponse(
            detected=primary_detected or variant_detected,
            confidence=confidence,
            text=request.text,
            wake_word_found=next(
                (word for word in primary_wake_words + variant_wake_words if word in text_lower),
                None,
            ),
        )
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Invalid request: {str(e)}")
