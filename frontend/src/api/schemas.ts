/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/navigation/directions": {
    /**
     * Get Directions
     * @description Get directions between two locations via GET
     */
    get: operations["get_directions_api_navigation_directions_get"];
  };
  "/api/navigation/places": {
    /**
     * Find Places
     * @description Find places based on a query string via GET
     */
    get: operations["find_places_api_navigation_places_get"];
  };
  "/api/navigation/geocode": {
    /**
     * Geocode Address
     * @description Geocode an address to coordinates via GET
     */
    get: operations["geocode_address_api_navigation_geocode_get"];
  };
  "/api/navigation/traffic": {
    /**
     * Get Traffic
     * @description Get traffic information between two points via GET
     */
    get: operations["get_traffic_api_navigation_traffic_get"];
  };
  "/api/navigation/query": {
    /**
     * Process Navigation Query
     * @description Process a natural language navigation query
     */
    post: operations["process_navigation_query_api_navigation_query_post"];
  };
  "/api/wake/detect": {
    /**
     * Detect Wake Word
     * @description Detect wake word in text using improved method
     */
    post: operations["detect_wake_word_api_wake_detect_post"];
  };
  "/": {
    /**
     * Root
     * @description API root endpoint that returns basic information
     */
    get: operations["root__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Bounds */
    Bounds: {
      northeast: components["schemas"]["Location"];
      southwest: components["schemas"]["Location"];
    };
    /** DirectionsResponse */
    DirectionsResponse: {
      /** Status */
      status: string;
      /** Routes */
      routes: components["schemas"]["Route"][];
      /** Error */
      error?: string | null;
    };
    /** Distance */
    Distance: {
      /** Text */
      text: string;
      /** Value */
      value: number;
    };
    /** Duration */
    Duration: {
      /** Text */
      text: string;
      /** Value */
      value: number;
    };
    /** GeocodeResponse */
    GeocodeResponse: {
      /** Status */
      status: string;
      /** Results */
      results: components["schemas"]["GeocodeResult"][];
      /** Error */
      error?: string | null;
    };
    /** GeocodeResult */
    GeocodeResult: {
      /** Formatted Address */
      formatted_address: string;
      geometry: components["schemas"]["Geometry"];
      /** Place Id */
      place_id: string;
      /** Types */
      types: string[];
      /** Address Components */
      address_components: {
          [key: string]: unknown;
        }[];
    };
    /** Geometry */
    Geometry: {
      location: components["schemas"]["Location"];
      /** Viewport */
      viewport: {
        [key: string]: components["schemas"]["Location"];
      };
      /** Location Type */
      location_type: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Leg */
    Leg: {
      distance: components["schemas"]["Distance"];
      duration: components["schemas"]["Duration"];
      /** End Address */
      end_address: string;
      end_location: components["schemas"]["Location"];
      /** Start Address */
      start_address: string;
      start_location: components["schemas"]["Location"];
      /** Steps */
      steps: components["schemas"]["Step"][];
      /**
       * Traffic Speed Entry
       * @default []
       */
      traffic_speed_entry?: unknown[];
      /**
       * Via Waypoint
       * @default []
       */
      via_waypoint?: unknown[];
    };
    /** Location */
    Location: {
      /** Lat */
      lat: number;
      /** Lng */
      lng: number;
    };
    /** NavigationQueryRequest */
    NavigationQueryRequest: {
      /** Query */
      query: string;
      /** Location */
      location?: {
        [key: string]: number;
      } | null;
      /** Context */
      context?: {
        [key: string]: unknown;
      } | null;
    };
    /** NavigationQueryResponse */
    NavigationQueryResponse: {
      /** Query Type */
      query_type: string;
      /** Response */
      response: string;
      /** Original Query */
      original_query?: string | null;
      /** Processed Query */
      processed_query?: string | null;
      traffic_info?: components["schemas"]["TrafficInfo"] | null;
      /** Feature */
      feature?: string | null;
      /** Place Type */
      place_type?: string | null;
      places?: components["schemas"]["PlacesResponse"] | null;
    };
    /** OverviewPolyline */
    OverviewPolyline: {
      /** Points */
      points: string;
    };
    /** Place */
    Place: {
      /** Place Id */
      place_id: string;
      /** Name */
      name: string;
      /** Address */
      address: string;
      location: components["schemas"]["Location"];
      /**
       * Rating
       * @default 0
       */
      rating?: number;
      /**
       * User Ratings Total
       * @default 0
       */
      user_ratings_total?: number;
      /**
       * Types
       * @default []
       */
      types?: string[];
      /**
       * Price Level
       * @default 0
       */
      price_level?: number;
      /**
       * Business Status
       * @default
       */
      business_status?: string;
      /**
       * Opening Hours
       * @default {}
       */
      opening_hours?: {
        [key: string]: unknown;
      };
      /**
       * Permanently Closed
       * @default false
       */
      permanently_closed?: boolean;
      /** Photos */
      photos?: string[] | null;
    };
    /** PlacesResponse */
    PlacesResponse: {
      /** Status */
      status: string;
      /** Places */
      places: components["schemas"]["Place"][];
      /** Error */
      error?: string | null;
    };
    /** Points */
    Points: {
      /** Points */
      points: string;
    };
    /** Route */
    Route: {
      bounds: components["schemas"]["Bounds"];
      /** Copyrights */
      copyrights: string;
      /** Legs */
      legs: components["schemas"]["Leg"][];
      overview_polyline: components["schemas"]["OverviewPolyline"];
      /** Summary */
      summary: string;
      /**
       * Warnings
       * @default []
       */
      warnings?: string[];
      /**
       * Waypoint Order
       * @default []
       */
      waypoint_order?: number[];
    };
    /** Step */
    Step: {
      distance: components["schemas"]["Distance"];
      duration: components["schemas"]["Duration"];
      end_location: components["schemas"]["Location"];
      /** Html Instructions */
      html_instructions: string;
      polyline: components["schemas"]["Points"];
      start_location: components["schemas"]["Location"];
      /** Travel Mode */
      travel_mode: string;
      /** Maneuver */
      maneuver?: string | null;
    };
    /** TrafficInfo */
    TrafficInfo: {
      /** Normal Duration */
      normal_duration: string;
      /** Traffic Duration */
      traffic_duration: string;
      /** Has Traffic */
      has_traffic: boolean;
      /** Traffic Level */
      traffic_level: string;
      /** Delay Minutes */
      delay_minutes: number;
    };
    /** TrafficResponse */
    TrafficResponse: {
      /** Status */
      status: string;
      traffic_info?: components["schemas"]["TrafficInfo"] | null;
      /** Error */
      error?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** WakeWordRequest */
    WakeWordRequest: {
      /** Text */
      text: string;
    };
    /** WakeWordResponse */
    WakeWordResponse: {
      /** Detected */
      detected: boolean;
      /** Confidence */
      confidence: number;
      /** Text */
      text: string;
      /** Wake Word Found */
      wake_word_found?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Directions
   * @description Get directions between two locations via GET
   */
  get_directions_api_navigation_directions_get: {
    parameters: {
      query: {
        origin: string;
        destination: string;
        mode?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DirectionsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Find Places
   * @description Find places based on a query string via GET
   */
  find_places_api_navigation_places_get: {
    parameters: {
      query: {
        query: string;
        location?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlacesResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Geocode Address
   * @description Geocode an address to coordinates via GET
   */
  geocode_address_api_navigation_geocode_get: {
    parameters: {
      query: {
        address: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GeocodeResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Traffic
   * @description Get traffic information between two points via GET
   */
  get_traffic_api_navigation_traffic_get: {
    parameters: {
      query: {
        origin: string;
        destination: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TrafficResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Process Navigation Query
   * @description Process a natural language navigation query
   */
  process_navigation_query_api_navigation_query_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NavigationQueryRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NavigationQueryResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Detect Wake Word
   * @description Detect wake word in text using improved method
   */
  detect_wake_word_api_wake_detect_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WakeWordRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WakeWordResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Root
   * @description API root endpoint that returns basic information
   */
  root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
